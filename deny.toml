[graph]
# The path where the output will be written to, the extension will determine the
# output format, supported extensions are: svg, dot, png, jpg
#output = "target/deps.svg"
# The deps field determines which dependencies will be included in the graph
all-features = false
no-default-features = false
# The targets field determines which targets will be included in the graph
targets = []

[licenses]
# The confidence threshold for detecting a license from a license text.
# The higher the value, the more confident the tool needs to be that the
# detected license is correct. The default is 0.8.
confidence-threshold = 0.8
# List of explicitly allowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
allow = [
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "MIT",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
]
# List of explicitly disallowed licenses
# See https://spdx.org/licenses/ for list of possible licenses
deny = ["GPL-2.0", "GPL-3.0", "AGPL-1.0", "AGPL-3.0"]
# Lint level for when multiple versions of the same license are detected
multiple-versions = "warn"
# Confidence threshold for detecting a license from a license text.
# The higher the value, the more confident the tool needs to be that the
# detected license is correct. The default is 0.8.
# confidence-threshold = 0.8
# Allow 1 or more licenses on a per-crate basis, so that particular licenses
# aren't accepted for every possible crate as with the normal allow list
exceptions = [
    # Each entry is the crate and version constraint, and its the license
    #{ allow = ["Zlib"], name = "adler32", version = "*" },
]

# Some crates don't have (easily) machine readable licensing information,
# adding a clarification or license text here will take precedence over
# the detection code
[[licenses.clarify]]
# The name of the crate the clarification applies to
name = "ring"
# The optional version constraint for the crate
#version = "*"
# The SPDX expression for the license requirements of the crate
expression = "MIT AND ISC AND OpenSSL"
# One or more files in the crate's source used as the "source of truth" for
# the license expression. If the files are missing, or do not contain the
# specified license text, the clarification will be ignored
license-files = [{ path = "LICENSE", hash = 0xbd0eed23 }]

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
# The confidence threshold for detecting a license from a license text.
# The higher the value, the more confident the tool needs to be that the
# detected license is correct. The default is 0.8.
highlight = "all"
# List of crates that are allowed. Use with care!
allow = []
# List of crates to deny
deny = []
# Certain crates/versions that will be skipped when doing duplicate detection.
skip = []
# Similarly to `skip` allows you to skip certain crates from being checked. Unlike `skip`,
# `skip-tree` skips the crate and all of its dependencies entirely.
skip-tree = []

[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"
# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for security vulnerabilities
vulnerability = "deny"
# The lint level for unmaintained crates
unmaintained = "warn"
# The lint level for crates that have been yanked from their source registry
yanked = "warn"
# The lint level for crates with security notices. Note that as of
# 2019-12-17 there are no security notice advisories in
# https://github.com/rustsec/advisory-db
notice = "warn"
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
    #"RUSTSEC-0000-0000",
]
